{"version":3,"sources":["webpack:///./src/scripts/components/Markdown.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;qEAEqE;AAEpC;AACe;AACpB;AACM;AACD;AAQ1B,MAAM,QAAS,SAAQ,4DAA4B;IAEtD,MAAM;QACF,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAErD,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,CAAC,MAAM;gBAAE,OAAO,IAAI,CAAC;YACvC,IAAI,OAAO,GAAG,gDAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,QAAQ,CAAC,gDAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtF,IAAI,OAAO,IAAI,EAAE,EAAE;gBACf,MAAM,GAAG,OAAO,CAAC;gBACjB,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,EAAE;aACpB;iBAAM;gBACH,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,KAAK,EAAE;aACrB;SACJ;QAED,OAAO,kDAAK,SAAS,EAAC,UAAU,EAAC,uBAAuB,EAAE,EAAC,MAAM,EAC7D,gDAAS,CAAC,QAAQ,CACd,6CAAM,CAAC,MAAM,EAAE;oBACX,GAAG,EAAE,IAAI;oBACT,SAAS,EAAE,IAAI;oBAEf,YAAY,EAAE,SAAS;iBAC1B,CAAC,CACL;aACJ,GAAG;IACR,CAAC;CAEJ","file":"home~oasisIndex~reignArc1~reignCharacters~reignRules~._src_scripts_components_Markdown.tsx~bb65f013_207d2d29a0621fda6c55.js","sourcesContent":["/* *************************************************************** **\n** * Â©2020 Michael Baker (project@absolutelynot.moe) | AGPL v3.0 * **\n** *************************************************************** */\n\nimport * as Preact from 'preact';\nimport { PureComponent } from './PureComponent';\nimport Marked from 'marked';\nimport DomPurify from 'dompurify';\nimport CryptoJS from \"crypto-js\";\n\ninterface MarkdownProps {\n    source: string,\n    encryptionKey?: string,\n    onDecode?:(success: boolean) => void\n}\n\nexport class Markdown extends PureComponent<MarkdownProps> {\n    \n    render() {\n        let { source, encryptionKey, onDecode } = this.props;\n\n        if (encryptionKey) {\n            if (!encryptionKey.length) return null;\n            let decoded = CryptoJS.AES.decrypt(source, encryptionKey).toString(CryptoJS.enc.Utf8);\n            if (decoded != \"\") {\n                source = decoded;\n                onDecode?.(true);\n            } else {\n                onDecode?.(false);\n            }\n        }\n\n        return <div className=\"markdown\" dangerouslySetInnerHTML={{__html: \n            DomPurify.sanitize(\n                Marked(source, {\n                    gfm: true,\n                    headerIds: true,\n                    \n                    headerPrefix: \"header-\",\n                })\n            )\n        }}/>\n    }\n\n} "],"sourceRoot":""}